* Python interface for robot v0.6
** Modules
*** move
**** move.drive(left,right,t=-1)
Moves in a straight line for ~t~ seconds.  ~left~ and ~right~ are from
-100 (backwards at full speed) to 100 (forwards at full speed), and
control the left and right wheels respectively. A negative value of
~t~ results in movement without a time limit.
**** move.rotate(speed,t=-1)
Rotates anticlockwise (from above) for ~t~ seconds.  Negative ~speed~
results in clockwise rotation, and negative ~t~ results in rotation
without a time limit.
**** move.speed()
Returns current speed of drive motors.
*** revolver
**** revolver.freeCount()
Returns number of free slots in revolver
**** revolver.redCount()
Returns number of red buoys in revolver
**** revolver.greenCount()
Returns number of green buoys in revolver
**** revolver.count()
Returns total number of buoys in revolver
**** revolver.isFull()
True if the revolver is full
**** revolver.isEmpty()
True if the revolver is empty
**** revolver.currentFull()
True if the current revolver slot is full
**** revolver.goToFreeSpace()
Rotates the revolver towards a free space, returning True if free
spaces were found and False if there were no free spaces.

NOTE: It is important that the claw is both EMPTY and the RIGHT WAY
UP, or that the revolver is empty, before this function is called. If
this isn't the case, then a buoy in the revolver could collide with
the claw. It is also important that all holders should be CLAMPED
except for the target holder which should be OPEN. This is to ensure
that the revolver stops at the right place.
**** revolver.goToRed()
Same as revolver.goToFreeSpace(), except that it goes to a slot
containing a red buoy.
**** revolver.goToGreen()
Same as revolver.goToFreeSpace(), except that it goes to a slot
containing a green buoy.
**** revolver.grab(isRed)
Makes the current holder slot grab a cup. ~isRed~ should be True if the
buoy is red, False if it is green and None if there is no buoy being
picked up.
**** revolver.release()
Makes current holder slot release.

NOTE: The current slot should either be empty, or the claw should be
the RIGHT WAY UP, LIFTED UP and CLAMPED to ensure that a buoy isn't
dropped.
*** claw
**** claw.isUp()
True if the claw is currently fully up
**** claw.isRightWayUp()
True if the claw is the right way up
**** claw.isGrabbed()
True if the claw is grabbed
**** claw.goDown()
Makes the claw lower itself down so that it is open and down (in that
order), returning True on success and False on failure. It assumes
that the claw is already the right way up.

This function ensures that the claw is ready to grab a new buoy. Note
that it does not ensure that it is safe to rotate the revolver; if a
buoy has just been dropped, you need to reverse a bit to ensure that
it isn't in the way.
**** claw.grab()
Makes the claw grab. Returns False on failure, otherwise True.
**** claw.colour()
Tests the colour of the RGB sensor. "red" indicates a red buoy, "green"
indicates a green buoy and "blue" indicates empty.

When the team is yellow, "red" and "green" are automatically
swapped. This allows you to program positions of fairways as though
for the blue team, and they will work for the yellow team.
**** claw.turnRightWayUp()
Turns the claw the right way up, ready to grab stray buoys.

NOTE: This function should only be called when the claw is both down
(or half way down) and closed
**** claw.turnUpsideDown()
Turns the claw upside down, ready to grab edge buoys.

NOTE: This function should only be called when the claw is both down
(or half way down) and closed.
**** claw.lift()
Lifts the claw up.

NOTE: This function should only be called when the claw is the right
way up.
**** claw.liftHalfway()
Lifts claw part way up. This is useful for rotating a buoy, which
can't be done when fully down (since the buoy would scrape along the
floor) and can't be done when fully up (since the claw would hit the
revolver). It can also be used for lifting buoys out of the edge
spaces.

NOTE: This function should only be called when the current revolver
slot is empty
**** claw.release()
Releases claw.
*** flag
**** flag.raise(delay=-1)
Raises the flag after ~delay~ seconds asynchronously
*** location
**** location.position()
Returns ~Pt~ of robot in arena, with (0,0) as top left of diagram.
**** location.bearing()
Returns bearing in degrees of robot, with North as pointing towards
big beacon tower (top of diagram).
**** location.team()
Returns the team for the current match - 0 for yellow, 1 for blue
*** route
**** route.goto(target)
Goes straight to the coordinates specified by the ~Pt~ ~target~.

Returns false if there was a problem.
**** route.orientation(bearing)
Makes robot rotate to ~bearing~
**** route.rotateAngle(angle)
Makes robot rotate by ~angle~ anticlockwise
*** maths
Module containing useful maths functions, as well as Pt class
**** maths.{sin,cos,tan,asin,acos,atan}
Trig functions in degrees
**** maths.correctBearing(x)
Takes a bearing specified for the blue team and flips it to work for
either team.
**** maths.correctAngle(x)
Takes a angle to rotate by specified for the blue team and flips it to
work for either team.
** Classes
*** Pt
The ~Pt~ class represents a coordinate on the map. It has two
attributes: x and y. Its constructor is of the form
Pt(x,y,correctSide=False), where ~x~ and ~y~ are the x and y
coordinates of the point.

~correctSide~ determines whether the function will correct the
coordinate based on the team colour of the robot. If this is True and
the team colour is yellow, it will flip the coordinates over. This
allows you to specify a point that will work regardless of the
starting side.

This class supports additions and subtractions.
**** Pt.dist(p)
Returns distance between points ~Pt~ and ~p~


